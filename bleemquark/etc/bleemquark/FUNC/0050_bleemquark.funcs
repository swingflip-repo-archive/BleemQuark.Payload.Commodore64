#!/bin/sh
###############################################################################
# BleemSync Function Library - BleemSync
# ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

### LOCAL FUNCTIONS ###########################################################
launch_retroarch(){
  echo "[BLEEMSYNC](INFO) launching retroarch"
  if [ -f "$bleemsync_path/opt/retroarch/retroarch" ]; then
    killall -s KILL showLogo sonyapp ui_menu auto_dimmer pcsx sdl_display &> "/dev/null"
    [ -f "$runtime_log_path/retroarch.log" ] && rm -f "$runtime_log_path/retroarch.log"
    if [ ! -f "$bleemsync_path/opt/retroarch/system/scph102b.bin" ]; then
      mkdir -p "$bleemsync_path/opt/retroarch/system"
      cp -f "/gaadata/system/bios/romw.bin" "$bleemsync_path/opt/retroarch/system/scph102b.bin"
      echo "[BLEEMSYNC](INFO) copied romw.bin to scph102b.bin for RA PCSX"
    fi
    mkdir -p "/tmp/ra_cache"
    custom_theme_path="$bleemsync_path/opt/retroarch/.config/retroarch/assets/xmb/custom"
    [ ! -f "$custom_theme_path/font.tff" ] && cp -f "/usr/sony/share/data/font/SSTJapanese-Regular.ttf" "$custom_theme_path/font.tff"
    [ ! -f "$custom_theme_path/png/bg.png" ] && cp -f "/usr/sony/share/data/images/GR/JP_US_BG.png" "$custom_theme_path/png/bg.png"
    chmod +x "$bleemsync_path/opt/retroarch/retroarch"
    export HOME="$bleemsync_path/opt/retroarch"
    $bleemsync_path/opt/retroarch/retroarch -v &> "$runtime_log_path/retroarch.log"
    rm -rf "/tmp/ra_cache"
    umount "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch.cfg" &> "/dev/null"
    export HOME="/home/root" && cd "/home/root"
    sync
    launch_BootMenu
  else
    $bleemsync_path/bin/sdl_display "$bleemsync_path/etc/bleemsync/IMG/woah.png"
    sleep 1
    echo "[BLEEMSYNC](FAIL) tried to launch retroarch and it's not installed! Opening Stock ui..."
    launch_StockUI
  fi
}

launch_BootMenu(){
  echo "[BLEEMSYNC](INFO) launching BootMenu"
  echo 2 > /data/power/disable
  rm -f "/tmp/launchfilecommand"
  if [ "$boot_menu_music" = "1" ]; then
    $bleemsync_path/bin/boot_menu --image-folder "$images_path" --music-folder "$sounds_path/"
  else
    $bleemsync_path/bin/boot_menu --image-folder "$images_path"
  fi
  
  command=""
  [ -f "/tmp/launchfilecommand" ] && command=$(cat "/tmp/launchfilecommand") && rm -f "/tmp/launchfilecommand"
  if [ "$command" = "retroarch" ]; then
    echo "[BLEEMSYNC](INFO) RA selected from boot menu. Launching retroarch"
    launch_retroarch
  elif [ "$command" = "bleemsync" ]; then
    echo "[BLEEMSYNC](INFO) BS selected from boot menu"
    launch_StockUI
  else
    return 0
  fi
}

launch_StockUI(){
  echo "[BLEEMSYNC](INFO) launching stock ui"
  echo 0 > /data/power/disable
  select_UI_theme
  cd "/data/AppData/sony/pcsx"
  export PCSX_ESC_KEY=2
  /usr/sony/bin/ui_menu --power-off-enable &> "$runtime_log_path/ui_menu.log"
}
###############################################################################

### UI_MENU -> retroarch INTERACTION FUNCTIONS ################################

#  The follow variables will need to have been gathered from an intercept script
#  prior to these functions being called
#
#
#  intercept_game_path=""     # The full path to the launching game file (follows argument -cdfile)
#  intercept_game_dir=""      # The directory game launched from - should be /data/AppData/sony/title
#  intercept_game_id=""        # The file name of the game minus the extension (ie. SCUS-0001)
#  intercept_game_ext=""      # The extension of game minus . (ie. cue)
#  intercept_save_state=false # Set to true if ui_menu launches with -load

exit_checkSaveState(){
  # This function should only be called from the intercept script after retroarch exits
  echo "[BLEEMSYNC](INFO) checking for auto save state on retroarch exit"

  # An auto save state is created automatically, but what if the game disc was changed since
  # retroarch was originally launched. Check that the last saved state matches the ID of the launching
  # game
    
  ra_last_game=`ls -t $mountpoint/bleemsync/opt/retroarch/savestates/*.auto | head -1`

  if [ "$ra_last_game" == "" ]; then
    echo "[BLEEMSYNC](INFO) no auto save state exists"
    return 0
  fi

  ra_last_game="${ra_last_game##*/}"          # Remove leading directories
  ra_last_game="${ra_last_game%.state.auto}"  # Remove trailing file extension .state.auto

  if [ ! "$ra_last_game" == "$intercept_game_id" ]; then    
    #  The last save state was for a different game, check if this disc belongs to the launching game
    #  If it does then a disc swap has occured, so update the game ids so the correct save state
    #  data is passed to ui_menu state is from a game which is different to the launched game"
    if [ -f "/data/AppData/sony/title/${ra_last_game}.${intercept_game_ext}" ]; then
      echo "[BLEEMSYNC](INFO) ${ra_last_game}.${intercept_game_ext} exists and belongs to the launching game, updating save state"
      intercept_game_path="/data/AppData/sony/title/${ra_last_game}.${intercept_game_ext}"
      intercept_game_id=$ra_last_game
      echo "[BLEEMSYNC](INFO) New game path: $intercept_game_path"
      echo "[BLEEMSYNC](INFO) New Game ID: $intercept_game_id"
    else
      echo "[BLEEMSYNC](INFO) but it does not appear to belong to the game we launched from, so we'll ignore it [${ra_last_game}.${intercept_game_ext}]"
    fi
  fi

  #  Check if an auto save state exists and then move it to the correct location for ui_menu to handle
  if [ -f $mountpoint/bleemsync/opt/retroarch/savestates/${intercept_game_id}.state.auto ]; then
    echo "[BLEEMSYNC](INFO) an auto save state exists"
    #  Create filename.txt
    echo $intercept_game_path > /data/AppData/sony/pcsx/.pcsx/filename.txt
    echo $intercept_game_id >> /data/AppData/sony/pcsx/.pcsx/filename.txt
    #  Move save state files
    mv $mountpoint/bleemsync/opt/retroarch/savestates/${intercept_game_id}.state.auto /data/AppData/sony/pcsx/.pcsx/sstates/${intercept_game_id}.000
    mv $mountpoint/bleemsync/opt/retroarch/savestates/${intercept_game_id}.state.auto.png /data/AppData/sony/pcsx/.pcsx/screenshots/${intercept_game_id}.png      
  fi

  # Remove any remaining auto save states. We're completly hijacking the auto-save state process
  # so these need to be removed to ensure things work correctly
  # F for orphaned auto saves
  rm $mountpoint/bleemsync/opt/retroarch/savestates/*.auto
}

launch_retroarch_from_StockUI(){
  echo "[BLEEMSYNC](INFO) launching retroarch from menu_ui"
  #  Check RA Exists and is configured correctly
  [ -f "$runtime_log_path/retroarch.log" ] && rm -f "$runtime_log_path/retroarch.log" 
  [ ! -f "$mountpoint/bleemsync/opt/retroarch/retroarch" ] && break #FAIL
  if [ ! -f "$mountpoint/bleemsync/opt/retroarch/retroarch/system/scph102b.bin" ]; then
    cp -f "/gaadata/system/bios/romw.bin" "$mountpoint/bleemsync/opt/retroarch/retroarch/system/scph102b.bin"
    echo "[BLEEMSYNC](INFO) copied romw.bin to scph102b.bin for RA PCSX"
  fi
  mkdir -p "/tmp/ra_cache"
  chmod +x "$mountpoint/bleemsync/opt/retroarch/retroarch"
  export HOME="$mountpoint/bleemsync/opt/retroarch"
  #  Check if this is a Save State load
  if [ "$intercept_save_state" = true ]; then
    echo "[BLEEMSYNC](INFO) this is a save state load"
    mv /data/AppData/sony/pcsx/.pcsx/sstates/${intercept_game_id}.000 $mountpoint/bleemsync/opt/retroarch/savestates/${intercept_game_id}.state.auto
  fi

  #  Launch retroarch
  echo "[BLEEMSYNC](INFO) Launching retroarch for game $intercept_game_path"
  $mountpoint/bleemsync/opt/retroarch/retroarch -v -L $mountpoint/bleemsync/opt/retroarch/retroarch/.config/retroarch/cores/pcsx_rearmed_libretro.so $intercept_game_path &> "$runtime_log_path/retroarch.log"
  echo "[BLEEMSYNC](INFO) retroarch exit code $?"
  rm -rf "/tmp/ra_cache"
}

link_ra_memory_cards(){

  ##
  #  WORK IN PROGRESS
  ##
  return 0

  #  This function will link ui_menu and retroarch memory cards
  #  ui_menu memory cards take precedence
  echo "[BLEEMSYNC](INFO) linking ui_menu memory cards to retroarch"
  if ls -la | grep -i ".pcsx ->"; then
    if [ ! -f /data/AppData/sony/pcsx/.pcsx/memcards/card1.mcd ]; then
      mkdir -p /data/AppData/sony/pcsx/.pcsx/memcards
      cp /usr/sony/share/data/memcard/card.mcd /data/AppData/sony/pcsx/.pcsx/memcards/card1.mcd
    fi
        
    # Will this work if $mountpoint is FAT32? 
    # NO IT WON'T ANDSHREW
    ln -sf /data/AppData/sony/pcsx/.pcsx/memcards/card1.mcd $mountpoint/bleemsync/opt/retroarch/saves/${intercept_game_id}.srm

    # retroarch creates a memory card per game, which means all possible game discs need to be linked back to
    # /data/AppData/sony/pcsx/.pcsx/memcards/card1.mcd for them to function with a shared memory card which can be
    # managed from ui_menu
    #
    # This is rather brute force at the moment, but iterate through each file in the directory and create a memory card symlink
    for e in /data/AppData/sony/title/*; do
      if [ -f "$e" ]; then
        temp_id="${e##*/}"
        temp_id="${temp_id%.*}"
        ln -sf /data/AppData/sony/pcsx/.pcsx/memcards/card1.mcd $mountpoint/bleemsync/opt/retroarch/saves/${temp_id}.srm
      fi
    done
  fi
  
}

###############################################################################

### MAIN BLEEMSYNC FUNCTION ###################################################
execute_bleemsync_func(){
  echo "[BLEEMSYNC](Executing) execute_bleemsync_func()"
  echo 1 > /sys/class/leds/red/brightness
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)

  #Run on console bleemsync (This will be replaced in 1.0)
  if [ -f "$mountpoint/system/bleemsync/BleemSync" ]
  then
    cd "$mountpoint/system/bleemsync"
    chmod +x "BleemSync"
    ./BleemSync
    cd "/home/root"
  fi

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync DB processing took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)

  # Build external directory structure
  mkdir -p "$mountpoint/system/bios"
  mkdir -p "$mountpoint/system/preferences/system"
  mkdir -p "$mountpoint/system/preferences/user"
  mkdir -p "$mountpoint/system/preferences/autodimmer"
  mkdir -p "$mountpoint/system/databases"
  mkdir -p "$mountpoint/system/region"
  mkdir -p "$mountpoint/system/ui"

  # Copy the bios files
  [ ! -f "$mountpoint/system/bios/romw.bin" ] && cp -fr "/gaadata/system/bios/"* "$mountpoint/system/bios"
  # Copy the regional.pre
  [ ! -f "$mountpoint/system/preferences/system/regional.pre" ] && cp -f "/gaadata/preferences/"* "$mountpoint/system/preferences/system"
  # Copy out the user.pre
  [ ! -f "$mountpoint/system/preferences/user/user.pre" ] && cp -f "/data/AppData/sony/ui/"* "$mountpoint/system/preferences/user"
  # Copy out the auto dimming config
  [ ! -f "$mountpoint/system/preferences/autodimmer/config.cnf" ] && cp -f "/data/AppData/sony/auto_dimmer/"* "$mountpoint/system/preferences/autodimmer"
  # Copy out the region info
  [ ! -f "$mountpoint/system/region/REGION" ] && cp -f "/gaadata/geninfo/"* "$mountpoint/system/region"
  # Copy ui error log
  [ ! -f "$mountpoint/system/ui/error.log" ] && cp -f "/data/sony/ui/"* "$mountpoint/system/ui"
  sync

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync DB processing took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)

  # Unmount partitons and create tmpfs - Shut system down on failure
  MOUNT_FAIL=0
  umount /data || MOUNT_FAIL=1 
  umount /gaadata || MOUNT_FAIL=1 
  # Create gaadata and data folders in tmp then mount over original folders
  mkdir -p "/var/volatile/gaadatatmp" "/var/volatile/datatmp"
  mount -o bind "/var/volatile/gaadatatmp" "/gaadata" || MOUNT_FAIL=1 
  mount -o bind "/var/volatile/datatmp" "/data" || MOUNT_FAIL=1 
  mount -o bind "$bleemsync_path/etc/bleemsync/SUP/scripts/20-joystick.rules" "/etc/udev/rules.d/20-joystick.rules" || MOUNT_FAIL=1 
  mount -o bind "$bleemsync_path/etc/bleemsync/SUP/binaries/pcsx" "/usr/sony/bin/pcsx" || MOUNT_FAIL=1

  if [ "$MOUNT_FAIL" = "1" ]; then
    #display error message
    echo 0 > /sys/class/leds/green/brightness
    echo 1 > /sys/class/leds/red/brightness
    $bleemsync_path/bin/sdl_display "$bleemsync_path/etc/bleemsync/IMG/woah.png"
    sleep 1
    reboot
    exit 1
  fi

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync tmpfs mounting took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)

  # Create gaadata on tmpfs
  mkdir -p "/var/volatile/gaadatatmp/system/" "/var/volatile/gaadatatmp/databases/"
  if [ "$link_EMMC_and_USB" = "1" ]; then
    cp -f "$mountpoint/system/databases/regional.db" "/var/volatile/gaadatatmp/databases/"
  else
    ln -s "$mountpoint/system/databases" "/var/volatile/gaadatatmp/"
  fi
  ln -s "$mountpoint/system/region" "/var/volatile/gaadatatmp/geninfo"
  ln -s "$mountpoint/system/bios" "/var/volatile/gaadatatmp/system/bios"
  ln -s "$mountpoint/system/preferences/system" "/var/volatile/gaadatatmp/preferences"
  ls "$mountpoint/games" | grep '^[0-9]\+$' | xargs -I % sh -c "ln -s $mountpoint/games/%/GameData /var/volatile/gaadatatmp/%"
  
  # Create data on tmpfs
  mkdir -p "/var/volatile/datatmp/sony/sgmo" "/var/volatile/datatmp/AppData/sony"
  # ln -s "/tmp/diag" "/tmp/datatmp/sony/sgmo/diag"
  ln -s "/dev/shm/power" "/var/volatile/datatmp/power"
  ln -s "$mountpoint/system/ui" "/var/volatile/datatmp/sony/ui"
  ln -s "$mountpoint/system/preferences/user" "/var/volatile/datatmp/AppData/sony/ui"
  ln -s "$mountpoint/system/preferences/autodimmer" "/var/volatile/datatmp/AppData/sony/auto_dimmer"
  cp -fr "/usr/sony/share/recovery/AppData/sony/pcsx" "/var/volatile/datatmp/AppData/sony/pcsx"
  ls "$mountpoint/games" | grep '^[0-9]\+$' | xargs -I % sh -c "rm -rf /var/volatile/datatmp/AppData/sony/pcsx/% && ln -s $mountpoint/games/% /var/volatile/datatmp/AppData/sony/pcsx/%"
  ln -s "$mountpoint/system/bios" "/var/volatile/datatmp/AppData/sony/pcsx/bios"
  ln -s "/usr/sony/bin/plugins" "/var/volatile/datatmp/AppData/sony/pcsx/plugins"

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync tmpfs symbolic linking took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  # Unite EMMC and MEDIA games and databases
  if [ "$link_EMMC_and_USB" = "1" ]; then
    start=$(date +%s%N)
    [ -d "/var/volatile/emmc_gaadata" ] && umount "/var/volatile/emmc_gaadata" && rm -fr "/var/volatile/emmc_gaadata"
    [ -d "/var/volatile/emmc_data" ] && umount "/var/volatile/emmc_data" && rm -fr "/var/volatile/emmc_data"
    mkdir -p "/var/volatile/emmc_gaadata" && mount -o ro "/dev/mapper/gaadata" "/var/volatile/emmc_gaadata/"
    mkdir -p "/var/volatile/emmc_data" && mount "/dev/mmcblk0p10" "/var/volatile/emmc_data/"

    emmc_gaadata_count=$(ls "/var/volatile/emmc_gaadata" | grep '^[0-9]\+$' | wc -l)
    media_gaadata_count=$(ls "/var/volatile/gaadatatmp" | grep '^[0-9]\+$' | wc -l)
    i=1

    $bleemsync_path/bin/sqlite3 "/var/volatile/emmc_gaadata/databases/regional.db" -cmd ".output /tmp/emmc.sql" ".dump" ".quit"
    [ -f "/tmp/join.sql" ] && rm -f "/tmp/join.sql" && touch "/tmp/join.sql"

    echo "BEGIN TRANSACTION;" >> "/tmp/join.sql"
    while true; do
      [ "$i" = "$(( emmc_gaadata_count + 1))" ] && break
      ln -s "/var/volatile/emmc_gaadata/$i" "/var/volatile/gaadatatmp/$(( media_gaadata_count + i ))"
      rm -rf "/var/volatile/datatmp/AppData/sony/pcsx/$(( media_gaadata_count + i ))"
      ln -s "/var/volatile/emmc_data/AppData/sony/pcsx/$i" "/var/volatile/datatmp/AppData/sony/pcsx/$(( media_gaadata_count + i ))"
      echo $(grep "GAME VALUES($i," "/tmp/emmc.sql" | awk -v newindex=$(( media_gaadata_count + i )) -F "," '{ print "INSERT INTO GAME VALUES("newindex","$2","$3","$4","$5","$6","$7","$8","$9 }') >> "/tmp/join.sql"
      echo $(grep "DISC VALUES($i," "/tmp/emmc.sql" | awk -v newindex=$(( media_gaadata_count + i )) -F "," '{ print "INSERT INTO DISC VALUES(null,"newindex","$2","$3 }') >> "/tmp/join.sql"
      i=$(( i + 1 ))
    done
    echo "COMMIT;" >> "/tmp/join.sql"

    sed -i -e 's/;,/;/g' "/tmp/join.sql" #Required cleanup because of potential dirty characters in SONY stock SQLite DB
    
    $bleemsync_path/bin/sqlite3 "/var/volatile/gaadatatmp/databases/regional.db" -cmd ".read /tmp/join.sql" ".quit"

    if [ "$link_alphabeticalise" = "1" ]; then
      echo "create table new as select * from GAME order by GAME_TITLE_STRING; drop table GAME; create table GAME as select * from new order by GAME_TITLE_STRING; drop table new; .quit" \
      | $bleemsync_path/bin/sqlite3 "/var/volatile/gaadatatmp/databases/regional.db"
    fi

    end=$(date +%s%N)
    echo "[BLEEMSYNC](PROFILE) BleemSync EMMC + USB dyna link took: $(((end-start)/1000000))ms to execute"
  else
    [ -d "/var/volatile/emmc_gaadata" ] && umount "/var/volatile/emmc_gaadata" && rm -fr "/var/volatile/emmc_gaadata"
    [ -d "/var/volatile/emmc_data" ] && umount "/var/volatile/emmc_data" && rm -fr "/var/volatile/emmc_data"
    mkdir -p "/var/volatile/emmc_gaadata" && mount -o ro "/dev/mapper/gaadata" "/var/volatile/emmc_gaadata/"
    mkdir -p "/var/volatile/emmc_data" && mount "/dev/mmcblk0p10" "/var/volatile/emmc_data/"
  fi
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)
  # Fix for last selected game issue. If not in place user may experience ui issue
  sed -i "s/iUiuserSettingLastSelectGameCursorPos.*/iuiuserSettingLastSelectGameCursorPos=0/" "/var/volatile/datatmp/AppData/sony/ui/user.pre"

  # Reload and apply udev rules that were overmounted above
  # Allows both controllers to be detected through a USB hub
  udevadm control --reload-rules
  udevadm trigger

  # Default pcsx.cfg
  cd "$mountpoint/games"
  for D in *; do
    if [ -d "$D" ]; then
      if [ ! -f "$D/.pcsx/pcsx.cfg" ]; then
        mkdir -p "$D/.pcsx"
        cp -f "$mountpoint/system/defaults/pcsx.cfg" "$D/.pcsx/pcsx.cfg"
      fi
    fi
  done
  cd "/home/root" 

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync general fixing took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#
  #Patch out health check if toggled.
  if [ "$boot_disable_health" = "1" ]; then
    start=$(date +%s%N)
    echo "[BLEEMSYNC](INFO) attempting to patch out H+S statement"
    PATCH_FAIL=0
    PATCH_DIR="/var/volatile/health_patch"
    PATCH_BIN="$PATCH_DIR/patch.bin"
    PATCH_TARGET="/usr/sony/bin/ui_menu"
    PATCH_WORKING="$PATCH_DIR/ui_menu"

    # Perform patching
    mkdir -p "$PATCH_DIR"
    cp -f "$PATCH_TARGET" "$PATCH_WORKING"
    echo -n -e '\xb8\x0c\x00\x06\x03\x58\xbe' > "$PATCH_BIN"
    dd bs=1 if="$PATCH_BIN" skip=0 of="$PATCH_WORKING" seek=28084 count=3 conv=notrunc
    dd bs=1 if="$PATCH_BIN" skip=3 of="$PATCH_WORKING" seek=28120 count=2 conv=notrunc
    dd bs=1 if="$PATCH_BIN" skip=5 of="$PATCH_WORKING" seek=28712 count=2 conv=notrunc
    rm -f "$PATCH_BIN"
    mount -o bind "$PATCH_WORKING" "$PATCH_TARGET" || PATCH_FAIL=1
    if [ "$PATCH_FAIL" = "0" ]; then
      echo "[BLEEMSYNC](INFO) patched out H+S statement"
    else
      echo "[BLEEMSYNC](FAIL) failed to patch out H+S statement, continuing anyway..."
    fi
    end=$(date +%s%N)
    echo "[BLEEMSYNC](PROFILE) BleemSync H+S patching took: $(((end-start)/1000000))ms to execute"
  fi
#-----------------------------------------------------------------------------#
  echo 0 > /sys/class/leds/red/brightness
  echo "[BLEEMSYNC](INFO) completed bleemsync boot"
#-----------------------------------------------------------------------------#
  start=$(date +%s%N)
  #Cleanup before starting main user applications
  rm -rf "/tmp/systemd"*  
  rm -rf "/tmp/diag"
  rm -rf "/tmp/"*".sql"
  
  killall -s KILL sdl_display
  booted=0

  end=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) BleemSync pre run cleanup took: $(((end-start)/1000000))ms to execute"
#-----------------------------------------------------------------------------#

  [ "$boot_target_stock_UI" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_StockUI
  [ "$boot_target_stock_BM" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_BootMenu
  [ "$boot_target_stock_RA" = "1" ] && [ "$booted" = "0" ] && booted=1 && launch_retroarch

#-----------------------------------------------------------------------------#
  #Cleanup and shutdown (If active telnet session don't shutdown console.)
  if [ "$(who | wc -l)" = "1" ]; then
    while true; do
      sleep 9999
    done    
  else
    rm -rf "/tmp/ra_cache"
    sync
    echo "[BLEEMSYNC](Executed) execute_bleemsync_func()"
    reboot
  fi
  exit 0
}
###############################################################################
